services:
  backend:
    container_name: residential-backend
    build:
      dockerfile: Dockerfile
      context: backend/.
    env_file: .env
    ports:
      - "8080:8080"
    networks:
      - residential-be-network
      - residential-db-network
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_URL=jdbc:postgresql://pgdb/${POSTGRES_DB}
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 5s
      timeout: 5s
      retries: 5

  frontend:
    container_name: residential-frontend
    build:
      dockerfile: Dockerfile
      context: frontend/.
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - residential-fe-network

  postgresql:
    container_name: pgdb
    image: 'postgres:latest'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file: .env
    ports:
      - '5432:5432'
    networks:
      - residential-db-network
    volumes:
      - 'postgres-bin:/usr/lib/postgresql/${POSTGRES_VERSION}/bin'
      - 'postgres-data:/var/lib/postgresql/data'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  postgres-bin:
  postgres-data:

networks:
  residential-be-network:
    driver: bridge
    external: true
  residential-fe-network:
    external: true
  residential-db-network:
    driver: bridge
    external: true
